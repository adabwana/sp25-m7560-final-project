{"title":"Model Tuning","markdown":{"headingText":"Model Tuning","containsRefs":false,"markdown":"\nThis document outlines the different modeling approaches and hyperparameter tuning strategies employed in this project. For details on the preprocessing steps applied before model training, please refer to the `preprocessing_pipelines.md` document.\n\n## Framework Architecture\n\nTo tackle the prediction tasks for visit duration and building occupancy, we adopted a pragmatic, hybrid modeling strategy. Recognizing the strengths of different toolkits, we combined the R ecosystem for some tasks and Python for others, using the engineered features from our R pipeline as common ground.\n\n- **R (`tidymodels`)**: This was our workhorse for setting up and tuning Multivariate Adaptive Regression Splines (MARS), Random Forest, and XGBoost models. The structured approach of `tidymodels` (specifically `parsnip` for defining models, `recipes` for preprocessing, and `tune` for optimization) streamlined the workflow for these established algorithms. Key scripts include `src/r/models/models.R` and `scripts/run_pipeline.R`.\n- **Python (PyTorch)**: For exploring neural network approaches, we turned to Python and PyTorch. This gave us the flexibility to define custom architectures for a Multi-Layer Perceptron (MLP) and a Gated Recurrent Unit (GRU) network. The relevant code can be found in `src/python/tuning/gruey.py` (for GRU tuning via Optuna) and `notebooks/team/neuralnets.rmd` (for MLP exploration).\n\nThis blend allowed us to leverage familiar and effective tools for standard models while retaining the power to experiment with more complex neural network designs.\n\n## Cross-Validation and Holdout Strategy\n\nEnsuring our models generalize beyond the data they were trained on was paramount. We implemented a consistent validation process across both R and Python frameworks:\n\n1.  **Initial Split**: We first took the `LC_train` dataset (containing the fully labeled and engineered data from Fall 2016 - Spring 2017) and set aside 25% as a final **holdout set**. This data was *never* used during model tuning or selection.\n2.  **Cross-Validation**: The remaining 75% of the `LC_train` data became our training/validation set. We used **5-fold cross-validation** on *this* set to tune the hyperparameters for each model (MARS, RF, XGBoost, MLP, GRU).\n3.  **Tuning**: Within the 5 folds, models were trained on 4 folds and evaluated on the remaining fold. Performance metrics (primarily RMSE) averaged across the folds helped us identify the best-performing hyperparameter configuration for each algorithm.\n4.  **Final Training**: Once the best hyperparameters were chosen for a model, we retrained that model one last time using the *entire* 75% training/validation set.\n5.  **Holdout Evaluation**: Finally, this retrained model was evaluated on the **25% holdout set** we initially set aside. This provided the final, unbiased assessment of how well the model was likely to perform on truly unseen data.\n\nThis multi-step process helps guard against overfitting and gives us more confidence in our final performance metrics.\n\n![Cross-Validation Diagram (Conceptual)](../../presentation/images/modeling/model_building.jpg)\n*(Note: Diagram illustrates the general concept. Our specific process used 5 folds and an initial 80/20 split for the holdout set.)*\n\n## Core Algorithms & Tuning\n\n### R `tidymodels` Framework (MARS, Random Forest, XGBoost)\n\nThis part of the pipeline leveraged the integrated tools within `tidymodels` for model specification and hyperparameter tuning.\n\n**Algorithms & Tuning:**\n\n1.  **Multivariate Adaptive Regression Splines (MARS):**\n    - *Concept*: Builds a model using linear segments (hinge functions) to capture non-linearities.\n    - *Specification (`parsnip`)*:\n      ```r\n      # From src/r/models/models.R\n      mars_spec <- mars(\n        mode = \"regression\", num_terms = tune(), prod_degree = tune()\n      ) %>%\n        set_engine(\"earth\")\n      ```\n    - *Tuned Hyperparameters (`dials` grid)*:\n        - `num_terms`: Number of hinge functions. Explored ranges like [7, 15] (duration) and [120, 130] (occupancy).\n        - `prod_degree`: Maximum interaction degree between terms. Fixed at 1 (no interactions).\n      ```r\n      # Example grid for occupancy (from src/r/models/models.R)\n      mars_grid_occ <- grid_regular(\n        parameters(\n          num_terms(range = c(120L, 130L)),\n          prod_degree(range = c(1L, 1L))\n        ),\n        levels = c(num_terms = 10, prod_degree = 1)\n      )\n      ```\n\n2.  **Random Forest:**\n    - *Concept*: An ensemble of decision trees, reducing variance and improving robustness.\n    - *Specification (`parsnip`)*:\n      ```r\n      # From src/r/models/models.R\n      rf_spec <- rand_forest(\n        mode = \"regression\", trees = tune(), min_n = tune(), mtry = tune()\n      ) %>%\n        set_engine(\"ranger\")\n      ```\n    - *Tuned Hyperparameters (`dials` grid)*:\n        - `trees`: Number of trees. Ranges like [300, 325] (duration) and [250, 350] (occupancy).\n        - `min_n`: Min data points in a node for splitting. Ranges like [15, 25] (duration) and [2, 3] (occupancy).\n        - `mtry`: Number of predictors sampled at each split. Ranges like [20, 25] (duration) and [40, 45] (occupancy).\n      ```r\n      # Example grid for occupancy (from src/r/models/models.R)\n      rf_grid_occ <- grid_regular(\n        parameters(\n          trees(range = c(250L, 350L)),\n          min_n(range = c(2L, 3L)),\n          mtry(range = c(40L, 45L))\n        ),\n        levels = c(trees = 3, min_n = 2, mtry = 2)\n      )\n      ```\n\n3.  **XGBoost:**\n    - *Concept*: Gradient boosting machine that builds trees sequentially, correcting errors of prior trees.\n    - *Specification (`parsnip`)*:\n      ```r\n      # From src/r/models/models.R\n      xgb_spec <- boost_tree(\n        mode = \"regression\", trees = tune(), tree_depth = tune(), learn_rate = tune(),\n        min_n = tune(), mtry = tune()\n      ) %>%\n        set_engine(\"xgboost\")\n      ```\n    - *Tuned Hyperparameters (`dials` grid)*:\n        - `trees`: Number of boosting rounds. Ranges like [75, 100] (duration) and [350, 450] (occupancy).\n        - `tree_depth`: Max depth per tree. Ranges like [15, 21] (duration) and [6, 8] (occupancy).\n        - `learn_rate`: Learning rate. Fixed values explored (e.g., 0.05, 0.1).\n        - `min_n`: Min data points in a node. Ranges like [10, 15] (duration) and [2, 3] (occupancy).\n        - `mtry`: Predictors sampled per tree. Ranges like [12, 15] (duration) and [30, 35] (occupancy).\n      ```r\n      # Example grid for occupancy (from src/r/models/models.R)\n      xgb_grid_occ <- grid_regular(\n        parameters(\n          trees(range = c(350L, 450L)),\n          tree_depth(range = c(6L, 8L)),\n          learn_rate(range = log10(c(0.1, 0.1))),\n          min_n(range = c(2L, 3L)),\n          mtry(range = c(30L, 35L))\n        ),\n        levels = c(trees = 3, tree_depth = 3, learn_rate = 1, min_n = 2, mtry = 2)\n      )\n      ```\n\n### Python Framework (MLP, GRU)\n\nFor neural networks, we shifted to Python and PyTorch, performing preprocessing steps as outlined in `preprocessing_pipelines.md`.\n\n**Algorithms & Tuning:**\n\n1.  **Multi-Layer Perceptron (MLP):**\n    - *Concept*: A standard feedforward neural network.\n    - *Architecture Definition (`nn.Module`)*:\n      ```python\n      # Simplified from notebooks/team/neuralnets.rmd\n      import torch\n      import torch.nn as nn\n\n      class SimpleNN(nn.Module):\n          def __init__(self, input_dim, hidden_dims, output_dim, activation='ReLU', dropout=0.0):\n              super(SimpleNN, self).__init__()\n              # ... (logic to build sequential layers based on hidden_dims, activation, dropout)\n              layers = []\n              prev_dim = input_dim\n              # ... loop to add nn.Linear, activation, nn.Dropout ...\n              layers.append(nn.Linear(prev_dim, output_dim))\n              self.model = nn.Sequential(*layers)\n\n          def forward(self, x):\n              return self.model(x)\n      ```\n    - *Tuned Hyperparameters (Example Search Space)*:\n      ```python\n      # Example from notebooks/team/neuralnets.rmd\n      search_space = {\n          \"n_layers\": [1, 2, 3],\n          \"n_units_l0\": [12, 50, 100, 150], # Units in first hidden layer\n          \"n_units_l1\": [12, 50, 100],      # Units in second (if n_layers >= 2)\n          \"n_units_l2\": [12, 50],          # Units in third (if n_layers == 3)\n          \"activation\": [\"ReLU\"],           # Activation function\n          \"learning_rate\": [0.01],           # Optimizer learning rate\n          \"batch_size\": [2048],             # Training batch size\n          \"dropout\": [0, 0.2, 0.3],          # Dropout rate\n          \"weight_decay\": [0, 1e-5, 1e-4]   # L2 regularization\n      }\n      ```\n\n2.  **Gated Recurrent Unit (GRU) Network:**\n    - *Concept*: A type of recurrent neural network suitable for sequence data, though applied here to tabular features, potentially capturing interactions differently than MLPs.\n    - *Architecture Definition (`nn.Module`)*: A custom `GrueyModel` class was defined (in `src/python/models/gruey_architecture.py`), incorporating GRU layers potentially followed by linear layers.\n    - *Tuned Hyperparameters (Optuna Search Space)*: Tuning was performed using Optuna (`src/python/tuning/gruey.py`).\n      ```python\n      # Snippet from objective function in src/python/tuning/gruey.py\n      def objective(trial: optuna.trial.Trial, ...):\n          # Tunable\n          lr = trial.suggest_float(\"lr\", 1e-3, 5e-3, log=True)\n          dropout_rate = trial.suggest_float(\"dropout_rate\", 0.25, 0.42)\n          weight_decay = trial.suggest_float(\"weight_decay\", 1e-6, 1e-5, log=True)\n          gru_dim = trial.suggest_categorical(\"gru_dim\", [128, 256, 512])\n          num_layers = trial.suggest_int(\"num_layers\", 1, 2)\n          batch_size = trial.suggest_categorical(\"batch_size\", [64, 128])\n          gru_expansion = trial.suggest_float(\"gru_expansion\", 0.5, 1.4)\n          # Fixed\n          activation_fn_name = \"relu\"\n          # ... rest of objective function ...\n          return best_val_loss\n      ```\n\n## Framework Integration\n\nThis combined R and Python approach allowed us to cast a wide net, evaluating traditional statistical models alongside more contemporary neural networks. The `tidymodels` framework offered efficient tuning for the former, while PyTorch provided the flexibility needed for the latter. Tracking experiments across both environments was facilitated by **_MLflow_**, allowing us to compare results and ultimately select the best overall models based on their performance on the holdout set, as detailed in the Evaluation section.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"output-file":"model_tuning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.43","theme":"united"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}