{"title":"Feature Engineering","markdown":{"headingText":"Feature Engineering","containsRefs":false,"markdown":"\nThe complete feature engineering implementation can be found in our [source code](https://github.com/adabwana/sp25-m7560-final-project/blob/master/src/r/utils/create_data/feature_engineering.R).\n\n## Temporal Feature Engineering\n\nOur feature engineering process began with **_temporal data extraction_** using the `lubridate` and `hms` packages.\n\n```r\nprepare_dates <- function(df) {\n df %>% mutate(\n   Check_In_Date = mdy(Check_In_Date),\n   Check_In_Time = hms::as_hms(Check_In_Time)\n )\n}\n```\n\nFrom these validated timestamps, we construct several temporal features:\n\n```r\nadd_temporal_features <- function(df) {\n df %>% mutate(\n    Check_In_Day = wday(Check_In_Date, label = TRUE),\n    Is_Weekend = Check_In_Day %in% c(\"Sat\", \"Sun\"),\n    Check_In_Week = ceiling(day(Check_In_Date) / 7),\n    Check_In_Month = month(Check_In_Date, label = TRUE),\n    Check_In_Hour = hour(Check_In_Time)\n )\n}\n```\n\nAnalysis of visit patterns revealed a **_non-linear relationship_** between `Check_In_Hour` and `Duration` variables. This observation prompted the creation of a more nuanced `Time_Category` variable with distinct periods:\n\n```r\nadd_time_category <- function(df) {\n df %>% mutate(\n   Time_Category = case_when(\n       hour(Check_In_Time) < 6 ~ \"Late Night\",\n       hour(Check_In_Time) < 12 ~ \"Morning\",\n       hour(Check_In_Time) < 17 ~ \"Afternoon\",\n       hour(Check_In_Time) < 22 ~ \"Evening\",\n       TRUE ~ \"Late Night\"\n   )\n )\n}\n```\n\nThe `Semester` and `Expected_Graduation` variables presented a **_dimensionality challenge_** due to their categorical semester format (e.g., \"Fall 2016\"). We first converted these strings into actual date objects representing the start of the semester/expected graduation semester.\n\n```r\nconvert_semester_to_date <- function(semester_str) {\n  # Extract year and semester\n  parts <- strsplit(semester_str, \" \")[[1]]\n  year <- parts[length(parts)]\n  semester <- parts[1]\n  \n  # Map semesters to months\n  month <- case_when(\n    semester == \"Fall\" ~ \"08\",\n    semester == \"Spring\" ~ \"01\",\n    semester == \"Summer\" ~ \"06\",\n    semester == \"Winter\" ~ \"12\",\n    TRUE ~ NA_character_\n  )\n  \n  # Combine into date (day is arbitrary, set to 01)\n  paste0(month, \"/\", \"01\", \"/\", year)\n}\n\nadd_date_features <- function(df) {\n  df %>%\n    mutate(\n      # Convert semester to date\n      Semester_Date = mdy(purrr::map_chr(Semester, convert_semester_to_date)),\n      # Convert expected graduation to date\n      Expected_Graduation_Date = mdy(purrr::map_chr(Expected_Graduation, convert_semester_to_date)),\n    )\n}\n```\n\nUsing these dates, we then calculated a numeric **_'Months_Until_Graduation'_** metric, effectively reducing complexity while maintaining predictive potential.\n\n```r\nadd_graduation_features <- function(df) {\n  df %>% mutate(\n    # Calculate months until graduation\n    Months_Until_Graduation = as.numeric(\n      difftime(Expected_Graduation_Date, Semester_Date, units = \"days\") / 30.44 # average days per month\n    )\n  )\n}\n```\n\n## Course-Related Features\n\nThe `Course_Code_by_Thousands` variable was used to create a `Course_Level` feature:\n\n```r\nadd_course_features <- function(df) {\n  df %>% mutate(\n    Course_Level = case_when(\n      Course_Code_by_Thousands <= 100 ~ \"Special\",\n      Course_Code_by_Thousands <= 3000 ~ \"Lower Classmen\",\n      Course_Code_by_Thousands <= 4000 ~ \"Upper Classmen\",\n      TRUE ~ \"Graduate\" # Includes codes > 4000\n    )\n  )\n}\n```\n\nTo capture academic performance context, we developed categorical features for `Cumulative_GPA` and `Term_Credit_Hours`:\n\n```r\nadd_gpa_category <- function(df) {\n  df %>% mutate(\n    GPA_Category = case_when(\n      Cumulative_GPA >= 3.5 ~ \"Excellent\",\n      Cumulative_GPA >= 3.0 ~ \"Good\",\n      Cumulative_GPA >= 2.0 ~ \"Satisfactory\",\n      TRUE ~ \"Needs Improvement\" # Includes NA GPA values implicitly\n    )\n  )\n}\n```\n\n```r\nadd_credit_load_category <- function(df) {\n  df %>% mutate(\n    # Credit load features\n    Credit_Load_Category = case_when(\n      Term_Credit_Hours <= 6 ~ \"Part Time\",\n      Term_Credit_Hours <= 12 ~ \"Half Time\",\n      Term_Credit_Hours <= 18 ~ \"Full Time\",\n      TRUE ~ \"Overload\" # Includes > 18 hours\n    ),\n  )\n}\n```\n\n## Student Classification Features\n\nThe dataset exhibited an **_unexpected concentration_** of '_Senior_' classifications in the original `Class_Standing` variable. Further investigation suggested this might stem from students accumulating excess credits for senior status without necessarily being in their final year. To address this potential ambiguity while preserving useful information, we implemented a **_dual classification approach_**.\n\nFirst, we recoded the original `Class_Standing` variable, preserving potentially valuable self-reported information as `Class_Standing_Self_Reported`.\n\n```r\nadd_class_standing_category <- function(df) {\n  df %>% mutate(\n    # Renaming column and values for Class_Standing\n    Class_Standing_Self_Reported = case_when(\n      Class_Standing == \"Freshman\" ~ \"First Year\",\n      Class_Standing == \"Sophomore\" ~ \"Second Year\",\n      Class_Standing == \"Junior\" ~ \"Third Year\",\n      Class_Standing == \"Senior\" ~ \"Fourth Year\",\n      TRUE ~ Class_Standing # Keeps 'Graduate', 'Other', etc.\n    ),\n  )\n}\n```\n\nComplementing this, we developed a more **_objective BGSU Standing metric_** (`Class_Standing_BGSU`) based strictly on earned credit hours, following official university definitions. This dual approach provides both self-reported and objective perspectives.\n\n```r\nadd_class_standing_bgsu <- function(df) {\n  df %>% mutate(\n    # Class_standing by BGSU's definition\n    # https://www.bgsu.edu/academic-advising/student-resources/academic-standing.html\n    Class_Standing_BGSU = case_when(\n      Total_Credit_Hours_Earned < 30 ~ \"Freshman\",\n      Total_Credit_Hours_Earned < 60 ~ \"Sophomore\",\n      Total_Credit_Hours_Earned < 90 ~ \"Junior\",\n      Total_Credit_Hours_Earned <= 120 ~ \"Senior\",\n      TRUE ~ \"Extended\" # > 120 credits\n    ),\n  )\n}\n```\n\n## Course Name and Type Features\n\nThe raw `Course_Name` variable presented **_significant challenges_** due to its high cardinality and free-text nature. We implemented a **_detailed keyword-based categorization system_** (`add_course_name_category`) to group courses into meaningful academic domains (e.g., Business, Computer Science, Natural Sciences, Humanities) and types (e.g., Introductory, Intermediate, Advanced, Laboratory, Seminar, Independent Study). This involved using `grepl` with extensive keyword lists and a structured `case_when` statement to prioritize specific subject areas before applying level or type classifications. This provides a more manageable and informative feature than the raw course names.\n\n```r\nadd_course_name_category <- function(df) {\n  df %>% mutate(\n    Course_Name_Category = case_when(\n      # Handle Non-Course Entries First\n      Course_Name %in% c(\"Course Enrollment\") ~ \"Administrative\",\n\n      # Specific Subject Categories\n      grepl(\"Business|Finance|Accounting|Economics|Marketing|Management|Quantitative|\n      |Taxation|Planning|Organizational|Behavior|Money|Banking|Auditing|Global Economy|\n      |Financial Markets|Selling|Managing Change|Global Strategy\",\n            Course_Name, ignore.case = TRUE) ~ \"Business\",\n      grepl(\"Computer|Programming|Data|Software|Network|Database|Algorithm|\n      |Operating Systems|Analytics|Computing|Application\",\n            Course_Name, ignore.case = TRUE) ~ \"Computer Science\",\n      grepl(\"Mathematics|Calculus|Statistics|Probability|Geometry|Discrete|Algebra|\n      |\\bMath\\b|Quantitative|Analytics|Equations|\\bDesign\\b(?=.*Sample)|\\bDesign\\b(?=.*Experimental)|Game Theory\",\n            Course_Name, ignore.case = TRUE, perl=TRUE) ~ \"Mathematics\",\n      grepl(\"Statics|Dynamics|Engineering|Structural|Manufacturing|Electrical|Electronic|Thermodynamics|\n      |Machine Design|Fluid Power|CAD|BIM|Materials|Modeling|GIS|Geographic Information Systems|\n      |Construction|Electric Circuits|Structures|Concrete|Surveying|Estimating|Cost Control\",\n            Course_Name, ignore.case = TRUE) ~ \"Engineering/Technology\",\n      grepl(\"Physics|Chemistry|Biology|Astronomy|Earth|Environment|Science(?!.*Computer|.*Social|.*Political|.*Family|\n      |.*Food)|Solar System|Sea|Marine|Mechanics|Weather|Climate|Limnology|Ecology|Cosmos|Evolution|Life Through Time|Electricity|Magnetism|Meteorology\",\n            Course_Name, ignore.case = TRUE, perl = TRUE) ~ \"Natural Sciences\",\n      grepl(\"Psychology|Sociology|Anthropology|Social|Cultural|Society|Political|Development|\n      |Sexuality|Government|Minority|Adolescent|Family|Geography|Organizational|Behavior|GIS|\n      |Geographic Information Systems|Corrections|Poverty|Discrimination|Interaction|Women|\n      |Juvenile|Delinquency|Interviewing|Observation|Personality|Victimology|Criminology\",\n            Course_Name, ignore.case = TRUE) ~ \"Social Sciences\",\n      grepl(\"History|Philosophy|Ethics|Literature|Culture|Language|Art|Religion|Music|Moral|\n      |Phonetics|Linguistics|Writing|Composition|Conversation|America|Roman|Drawing|Studio|\n      |Performance|Stage|Recital|Civilizations|Thinking|Ideas|Cinematography|Translation|\n      |Mythology|Hispanic|Modern World|Existentialism|Media|Strategic Communication\",\n            Course_Name, ignore.case = TRUE) ~ \"Humanities\",\n      grepl(\"Education|Teaching|Learning|Childhood|Teacher|Curriculum|Child Development|\n      |Families|Field Experience|Communication Development|Design\",\n            Course_Name, ignore.case = TRUE) ~ \"Education\",\n      grepl(\"Anatomy|Physiology|Nutrition|Biomechanics|Exercise|Sport|Dietetics|Health|\n      |Kinesiology|Nursing|Sexuality|Weight Training|Fitness|Food|Acoustics|Speech|Hearing|Epidemiology\",\n            Course_Name, ignore.case = TRUE) ~ \"Health Sciences\",\n\n      # Course Types (Placed after specific subjects)\n      grepl(\"Laboratory|\\bLab\\b\", Course_Name, ignore.case = TRUE) ~ \"Laboratory\",\n      grepl(\"Seminar|Workshop\", Course_Name, ignore.case = TRUE) ~ \"Seminar\",\n      grepl(\"Independent|Special|Practicum|Internship|Field Experience|Topics\", # Added Topics here\n            Course_Name, ignore.case = TRUE) ~ \"Independent/Applied Study\",\n\n      # Course Levels (Applied last before Other/No Response)\n      grepl(\"Advanced|III|3|Analysis|Senior|Graduate|Dissertation|Research|Capstone\",\n            Course_Name, ignore.case = TRUE) ~ \"Advanced\",\n      grepl(\"Intermediate|II$|II |2|Applied\",\n            Course_Name, ignore.case = TRUE) ~ \"Intermediate\",\n      grepl(\"Basic|Elementary|Intro|Introduction|Fundamental|General|Principles|Orientation|Success\",\n            Course_Name, ignore.case = TRUE) ~ \"Introductory\",\n      grepl(\"No Response\", Course_Name, ignore.case = TRUE) ~ \"No Response\",\n\n      # Default case\n      TRUE ~ \"Other\"\n    )\n  )\n}\n```\n\nSimilarly, the `Course_Type` variable (e.g., \"MATH\", \"HIST\", \"ENG\") required **_consolidation_**. We grouped the original prefixes into broader academic categories (e.g., \"Business & Economics\", \"Natural Sciences\", \"Humanities & Arts\", \"Engineering & Technology\") using `case_when`, explicitly handling `NA` and \"No Response\" values first.\n\n```r\nadd_course_type_category <- function(df) {\n  df %>% mutate(\n    Course_Type_Category = case_when(\n      is.na(Course_Type) ~ \"No Response\", # Handle NA values\n      Course_Type == \"No Response\" ~ \"No Response\", # Handle explicit \"No Response\"\n\n      # Specific Categories based on Course_Type prefix\n      Course_Type %in% c(\"ACCT\", \"BA\", \"ECON\", \"FIN\", \"LEGS\", \"MGMT\", \"MKT\", \"MIS\", \"BIZX\", \"MBA\", \"ORGD\") ~ \"Business & Economics\",\n      Course_Type %in% c(\"BIOL\", \"CHEM\", \"GEOL\", \"PHYS\", \"ASTR\", \"ENVS\", \"SEES\") ~ \"Natural Sciences\",\n      Course_Type %in% c(\"CS\") ~ \"Computer Science\",\n      Course_Type %in% c(\"MATH\") ~ \"Mathematics\",\n      Course_Type %in% c(\"STAT\", \"OR\") ~ \"Statistics\",\n      Course_Type %in% c(\"ART\", \"CDIS\", \"CLAS\", \"COMM\", \"ENG\", \"ETHN\", \"FREN\", \"GER\", \"GERM\", \"HIST\", \"HUM\", \"LAT\", \"PHIL\", \"POPC\", \"SPAN\", \"THFM\", \"CHIN\", \"JAPN\", \"ARTH\", \"MUCH\", \"MDIA\", \"JOUR\", \"AMPD\", \"GSW\", \"MUCT\", \"ID\", \"RUSN\", \"ITAL\", \"MUS\", \"CLCV\") ~ \"Humanities & Arts\", # Added GSW, MUCT, ID, RUSN, ITAL, MUS, CLCV\n      Course_Type %in% c(\"AFS\", \"ROTC\") ~ \"Military Science\",\n      Course_Type %in% c(\"EDAS\", \"EDCI\", \"EDEC\", \"EDFI\", \"EDHD\", \"EDIS\", \"EDL\", \"EDMS\", \"EDTL\", \"HIED\", \"ACEN\", \"EIEC\") ~ \"Education\",\n      Course_Type %in% c(\"SOC\", \"PSYC\", \"POLS\", \"GEOG\", \"JOUR\", \"WMST\", \"WS\", \"ACS\", \"CAST\", \"CRJU\", \"SOWK\", \"GERO\") ~ \"Social Sciences\",\n      Course_Type %in% c(\"HDFS\", \"HNRS\", \"UNIV\", \"RESC\") ~ \"Interdisciplinary/Honors\",\n      Course_Type %in% c(\"FDST\", \"NUTR\", \"EXSC\", \"PE\", \"PUBH\", \"ESHP\", \"FN\", \"SM\", \"NURS\", \"MLS\", \"PEG\", \"AHTH\", \"DHS\", \"HMSL\") ~ \"Health Sciences\",\n      Course_Type %in% c(\"EET\", \"IT\", \"MET\", \"QS\", \"CONS\", \"IS\", \"ENGT\", \"ARCH\", \"ECET\") ~ \"Engineering & Technology\",\n\n      # Default Case\n      TRUE ~ \"Other\" # Catch-all for any unmapped types\n    )\n  )\n}\n```\n\n## Major Categories\n\nThe `Major` variable demanded a similar, extensive **_keyword-based reduction strategy_**. We developed a detailed `case_when` structure using `grepl` to map numerous specific major names into broader categories like \"Business & Management\", \"Computer Science/IT\", \"Natural Sciences\", \"Health Sciences\", \"Social Sciences & History\", \"Arts & Humanities\", etc. This process explicitly handled undecided/non-degree students and pre-professional tracks.\n\nCrucially, this function also identifies students with **_multiple majors_** (`Has_Multiple_Majors`) by detecting commas in the `Major` field (after cleaning out minor designations) and identifies the presence of **_minors_** (`Has_Minor`) using \"-MIN\".\n\n```r\nadd_major_category <- function(df) {\n  df %>% mutate(\n    # Create cleaned Major string for multi-major check (remove comma-separated minors)\n    Major_Cleaned = ifelse(is.na(Major), \"\", Major),\n    Major_Cleaned = gsub(\",[^,]+-MIN(:[^,]*)?\", \"\", Major_Cleaned, ignore.case = TRUE),\n    Major_Cleaned = gsub(\"[^,]+-MIN(:[^,]*)?,\", \"\", Major_Cleaned, ignore.case = TRUE),\n    \n    # Check for multiple majors based on cleaned string\n    Has_Multiple_Majors = ifelse(grepl(\",\", Major_Cleaned, fixed = TRUE), TRUE, FALSE),\n    \n    # Check for minor presence in the original string\n    Has_Minor = ifelse(grepl(\"-MIN\", Major, fixed = TRUE, ignore.case = TRUE), TRUE, FALSE),\n    # Is_Pre_Professional = ifelse(grepl(\"Pre-Med|Pre-Vet|Pre-Law|Pre-Dent|Pre-Prof\", Major, ignore.case = TRUE), TRUE, FALSE), # Optional flag if needed elsewhere\n    \n    Major_Category = case_when(\n      # Handle Undecided/Non-Degree First\n      grepl(\"Undecided|Deciding\", Major, ignore.case = TRUE) ~ \"Undecided/Deciding\",\n\n      # Subject Categories (Split CompSci/Eng, added keywords)\n      grepl(\"Education|Teaching|EDTL|EDAS|EDCI|EDEC|EDFI|EDHD|EDIS|EDL|EDMS|BSED|MED|PHD|Childhood|Adolescent|Intervention|Integrated|College Student Personnel|CSP\",\n            Major, ignore.case = TRUE) ~ \"Education\",\n      grepl(\"Business|Finance|Accounting|Economics|Marketing|Management|Supply Chain|SCM|ENTREP|ORGD|BA|BSBA|MBA|BIZX|Tourism|Hospitality|Event|Resort|Attraction|Selling|Human Resource|Sport Management|SPMGT\",\n            Major, ignore.case = TRUE) ~ \"Business & Management\",\n      grepl(\"Computer Science|Software|Data|Information Systems|Computing|Analytics|CS\", # Moved Analytics here for Busn Analytics\n            Major, ignore.case = TRUE) ~ \"Computer Science/IT\",\n      grepl(\"Engineering|ENGT|Technology|Electronics|ECET|EET|MET|CONS|Construction|Aviation|AVST|Architecture|ARCH|Mechatronics|EMST|Manufacturing|Quality Systems|Visual Communication|VCT\",\n            Major, ignore.case = TRUE) ~ \"Engineering & Technology\",\n      grepl(\"Biology|BIOL|Chemistry|CHEM|Physics|PHYS|Geology|GEOL|Astronomy|ASTR|Environment|ENVS|SEES|Marine|Geospatial|Science(?!.*Computer|.*Social|.*Political|.*Family|.*Food|.*Health|.*Sport)\",\n            Major, ignore.case = TRUE, perl=TRUE) ~ \"Natural Sciences\",\n      grepl(\"Mathematics|MATH|Statistics|STAT|Actuarial|ASOR\",\n            Major, ignore.case = TRUE) ~ \"Mathematics & Statistics\",\n      grepl(\"Health|Nursing|NURS|BSNUR|Nutrition|Dietetics|FN|Food|FDST|Kinesiology|Exercise|EXSC|Sport|SM|HMSL|Athletic Training|MAT|Medical Lab|MEDTECH|MLS|Respiratory Care|RCT|Gerontology|GERO|LTCR|Allied Health|AHTH|DHS|Public Health|PUBH|Communication Disorders|CDIS\",\n            Major, ignore.case = TRUE) ~ \"Health Sciences\",\n      grepl(\"Psychology|PSYC|Sociology|SOC|Anthropology|ANTH|Social Work|SOWK|Criminal Justice|CRJU|Political Science|POLS|Geography|GEOG|History|HIST|International|Public Admin|MPA|Family|HDFS|Liberal Arts|PPEL\",\n            Major, ignore.case = TRUE) ~ \"Social Sciences & History\", # Combined History here\n      grepl(\"Art|BFA|Music|MUS|MUCT|Theatre|THFM|Film|Media|MDIA|Communication|COMM|JOUR|Literature|English|ENG|Philosophy|PHIL|Ethics|Language|World Languages|WL|Spanish|SPAN|French|FREN|German|GER|Latin|LAT|Russian|RUSN|Italian|ITAL|Chinese|CHIN|Japanese|JAPN|Classics|CLCV|Humanities|HUM|Popular Culture|POPC|Ethnic|ETHN|GSW|Women|Apparel|Merchandising|AMPD|Interior Design|ID\",\n            Major, ignore.case = TRUE) ~ \"Arts & Humanities\",\n\n      # General Studies\n      grepl(\"Liberal Studies|Individualized Studies\", Major, ignore.case = TRUE) ~ \"General Studies\",\n      grepl(\"Pre-Med|Pre-Vet|Pre-Law|Pre-Dent|Pre-Prof\", Major, ignore.case = TRUE) ~ \"Pre-Professional\",\n      grepl(\"-MIN|Certificate|Minor\", Major, ignore.case = TRUE) ~ \"Special Program (Minor/Cert)\", # Catch minors explicitly\n      is.na(Major) | Major %in% c(\"No Response\", \"\", \"Guest\", \"Non-Degree\") ~ \"Unknown/Non-Degree\",\n\n      # Default Case\n      TRUE ~ \"Other\"\n    )\n  ) %>%\n    select(-c(Major_Cleaned)) # Remove the temporary cleaned column\n}\n```\n\n## Visit Pattern Features\n\n`Student_ID` analysis enabled the construction of several **_usage metrics_**. Beyond simple visit counts (`Total_Visits`), we examined **_temporal patterns_** at multiple scales, calculating visits per semester (`Semester_Visits`) and average weekly visits (`Avg_Weekly_Visits`).\n\n```r\nadd_visit_features <- function(df) {\n  df %>%\n    group_by(Student_IDs) %>%\n    mutate(\n      # Count visits per student\n      Total_Visits = n(),\n      # Count distinct visit dates per student per semester\n      Semester_Visits = n_distinct(Check_In_Date), # Assumes data is per semester, group_by(Student_IDs, Semester) might be safer if not\n      # Average visits per week (approximate)\n      Avg_Weekly_Visits = Semester_Visits / max(Semester_Week, na.rm = TRUE) # Use max week in semester\n    ) %>%\n    ungroup()\n}\n```\n\nExamination of visit frequency throughout the semester revealed **_clear patterns_**. Weeks 1-3, 9, 14, and 17 consistently showed lower activity levels (likely start/end of term, breaks), while the remaining weeks demonstrated higher traffic. We encoded this insight through a categorical `Week_Volume` feature.\n\n```r\nadd_week_volume_category <- function(df) {\n  df %>%\n    mutate(\n      Week_Volume = case_when(\n        Semester_Week %in% c(4:8, 10:13, 15:16) ~ \"High Volume\",\n        Semester_Week %in% c(1:3, 9, 14, 17) ~ \"Low Volume\",\n        TRUE ~ \"Other\" # Handle potential NAs or unexpected week numbers\n      )\n    )\n}\n```\n\n![Week Visits](../../presentation/images/eda/week_visits.png)\n\n## Course Load and Performance Features\n\nFor each student-semester combination, we developed metrics to capture **_academic context_**. We tracked the number of unique courses (`Unique_Courses`), the diversity of course levels taken (`Course_Level_Mix`), and the proportion of upper-division courses (`Advanced_Course_Ratio`).\n\n```r\nadd_course_load_features <- function(df) {\n  df %>%\n    group_by(Student_IDs, Semester) %>%\n    mutate(\n      # Number of unique courses taken by student in that semester\n      Unique_Courses = n_distinct(Course_Number),\n      # Mix of course levels taken by student in that semester\n      Course_Level_Mix = n_distinct(Course_Code_by_Thousands),\n      # Proportion of advanced courses ('Upper Classmen' level) taken by student in that semester\n      Advanced_Course_Ratio = mean(Course_Level == \"Upper Classmen\", na.rm = TRUE)\n    ) %>%\n    ungroup()\n}\n```\n\nAdditionally, we implemented a **_GPA trend indicator_** (`GPA_Trend`) using the `sign()` function on the `Change_in_GPA` column. This focuses on the direction of GPA change (positive, negative, or zero) rather than the magnitude.\n\n```r\nadd_gpa_trend <- function(df) {\n  df %>% mutate(\n    # Calculate GPA trend (1 for positive, -1 for negative, 0 for no change/NA)\n    GPA_Trend = sign(Change_in_GPA),\n  )\n}\n```\n\n## Group Dynamics\n\nA final analytical step involved identifying **_potential group study patterns_**. By counting occurrences of identical `Check_In_Timestamp` values (combined date and time), we estimated `Group_Size`. This led to a boolean `Group_Check_In` flag and a categorical `Group_Size_Category`.\n\n```r\nadd_group_features <- function(df) {\n  df %>%\n    mutate(\n      Check_In_Timestamp = ymd_hms(paste(Check_In_Date, Check_In_Time))\n    ) %>%\n    # Count how many rows share the exact same check-in timestamp\n    add_count(Check_In_Timestamp, name = \"Group_Size\") %>%\n    mutate(\n      # Flag if group size is greater than 1\n      Group_Check_In = Group_Size > 1,\n      # Categorize group size\n      Group_Size_Category = case_when(\n        Group_Size == 1 ~ \"Individual\",\n        Group_Size <= 3 ~ \"Small Group\",\n        Group_Size <= 6 ~ \"Medium Group\",\n        TRUE ~ \"Large Group\" # Includes > 6\n      )\n    ) %>%\n    # Remove the temporary timestamp column\n    select(-Check_In_Timestamp)\n}\n```\n\nWhile some simultaneous check-ins might be coincidental, this classification captures potential **_social patterns_** in Learning Commons usage.\n\n## Data Quality & Response Variable Handling\n\nEssential validation and processing steps were included for the target variables (`Duration_In_Min` and `Occupancy`) and related features.\n\nWe ensured `Duration_In_Min` was calculated correctly from check-in/out times and that negative durations (data errors) were handled (set to `NA` and filtered).\n\n```r\nensure_duration <- function(df) {\n  # Calculate duration in minutes\n  df %>%\n    mutate(\n      Duration_In_Min = as.numeric(difftime(\n        Check_Out_Time,\n        Check_In_Time,\n        units = \"mins\"\n      )),\n      # Handle negative durations (likely data errors)\n      Duration_In_Min = if_else(Duration_In_Min < 0, NA_real_, Duration_In_Min),\n    ) %>%\n    # Remove rows where duration could not be calculated or was negative\n    filter(!is.na(Duration_In_Min))\n}\n```\n\nWe also created a categorical version of duration, `Session_Length_Category`.\n\n```r\nadd_session_length_category <- function(df) {\n  df %>% mutate(\n    # Add session length categories based on Duration_In_Min\n    Session_Length_Category = case_when(\n      Duration_In_Min <= 30 ~ \"Short\",\n      Duration_In_Min <= 90 ~ \"Medium\",\n      Duration_In_Min <= 180 ~ \"Long\",\n      Duration_In_Min > 180 ~ \"Extended\",\n      TRUE ~ NA_character_ # Handle cases where Duration_In_Min might be NA\n    )\n  )\n}\n```\n\nThe `Occupancy` variable (number of students present at check-in time) was calculated by tracking cumulative arrivals and departures within each day.\n\n```r\ncalculate_occupancy <- function(df) {\n  df %>%\n    # Ensure data is ordered chronologically within each day\n    arrange(Check_In_Date, Check_In_Time) %>%\n    group_by(Check_In_Date) %>%\n    mutate(\n      # Cumulative arrivals on this day up to this point\n      Cum_Arrivals = row_number(),\n      # Cumulative departures on this day before or at this check-in time\n      Cum_Departures = sapply(seq_along(Check_In_Time), function(i) {\n        sum(!is.na(Check_Out_Time[1:i]) & \n            Check_Out_Time[1:i] <= Check_In_Time[i])\n      }),\n      # Occupancy is arrivals minus departures\n      Occupancy = Cum_Arrivals - Cum_Departures\n    ) %>%\n    # Remove temporary cumulative columns\n    select(-c(Cum_Arrivals, Cum_Departures)) %>%\n    ungroup() # Ungroup after calculation\n}\n```\n\n## Conclusion\n\nOur feature engineering process addressed key challenges in the Learning Commons dataset through **_systematic transformation_** and **_enrichment_**. Temporal features capture cyclical patterns and academic calendar effects. Course-related variable treatments reduce dimensionality while preserving meaningful distinctions. The dual approach to student classification provides complementary perspectives.\n\nThe **_detailed keyword-based categorization_** for `Course_Name`, `Course_Type`, and `Major` balances granularity and practicality, enhancing interpretability despite some consolidation. Visit pattern features capture individual and facility-wide trends. The group dynamics features offer insights into collaborative usage.\n\nExtensive **_validation and calculation steps_** for `Duration_In_Min` and `Occupancy` ensure data quality. These engineered features form a robust foundation for modeling, though further refinement is always possible.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":false,"output-file":"feature_engineering.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.43","theme":"united"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html","revealjs"]}